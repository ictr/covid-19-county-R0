data = read.csv(file.choose())
View(data)
data[,8] = Null
data = read.csv(file.choose())
View(data)
View(data)
names(data)
View(data)
data.frame(matrix(nrow = 3, ncol = 3))
data = data.frame(matrix(nrow = 3, ncol = 3))
data[,1] = c("Canada", "US", "UK")
View(data)
data[,2] = c("10", "7", "1")
View(data)
ggplot(data, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0)
library(ggplot2)
ggplot(data, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0)
ggplot(data, aes(x="", y=X2, fill=X1)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0)
colnames(data) = c("Country", "Number_of_Firms")
data = data.frame(matrix(nrow = 3, ncol = 2))
data[,1] = c("Canada", "US", "UK")
data[,2] = c("10", "7", "1")
colnames(data) = c("Country", "Number_of_Firms")
ggplot(data, aes(x="", y=Number_of_Firms, fill=Country)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_minimal()
ggplot(data, aes(x="", y=Number_of_Firms, fill=Country)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
View(data)
View(data)
data = data.frame(matrix(nrow = 3, ncol = 2))
data[,1] = c("Canada", "US", "UK")
data[,2] = c(10, 7, 1)
colnames(data) = c("Country", "Number_of_Firms")
ggplot(data, aes(x="", y=Number_of_Firms, fill=Country)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
rm(list=ls())
clear
install.packages("MESS")
install.packages("MESS")
install.packages("MESS")
library(devtools)
install.packages("roxygen2")
library(roxygen2)
devtools::create("scDaPars")
library(scDaPars)
?scDaPars
library(devtools)
install_github("YiPeng-Gao/scDaPars")
?scDaPars
library(scDaPars)
?scDaPars
library(scDaPars)
?scDaPars
setwd("Dropbox/Wei_Li_Lab/aQTL_project/To_Lei/")
library(data.table)
GWAS_table_list = dir(pattern = "*.txt.gz")
GWAS_table = fread(GWAS_table_list[1], stringsAsFactors = F, header = T)
aQTL_table = subset(GWAS_table, GWAS_table$QTL_Annotation == 1)
aQTL = as.numeric(aQTL_table$P)
exp.pvalues = (rank(aQTL, ties.method="first")+.5)/(length(aQTL)+1)
#Make plot
plot(-log10(exp.pvalues), -log10(aQTL))
total_gwas_point = GWAS_table$P
total_gwas_point = GWAS_table$P
total.exp.pvalue = (rank(total_gwas_point, ties.method="first")+.5)/(length(total_gwas_point)+1)
total_gwas_point = GWAS_table$P
total.exp.pvalue = (rank(total_gwas_point, ties.method="first")+.5)/(length(total_gwas_point)+1)
plot(-log10(total.exp.pvalue), -log10(total_gwas_point))
total_gwas_point = GWAS_table$P
total.exp.pvalue = (rank(total_gwas_point, ties.method="first")+.5)/(length(total_gwas_point)+1)
aQTL_table = subset(GWAS_table, GWAS_table$QTL_Annotation == 1)
aQTL = as.numeric(aQTL_table$P)
aQTL.exp.pvalues = (rank(aQTL, ties.method="first")+.5)/(length(aQTL)+1)
eQTL_table = subset(GWAS_table, GWAS_table$eQTL_Annotation == 1)
eQTL = as.numeric(eQTL_table$P)
eQTL.exp.pvalues = (rank(eQTL, ties.method="first")+.5)/(length(eQTL)+1)
qqplot_obs = append(total_gwas_point, aQTL, eQTL)
qqplot_exp = append(total.exp.pvalue, aQTL.exp.pvalues, eQTL.exp.pvalues)
qqplot_combine = data.frame(rbind(qqplot_obs, qqplot_exp))
qqplot_obs = append(total_gwas_point, aQTL)
qqplot_obs = append(qqplot_obs, eQTL)
qqplot_exp = append(total.exp.pvalue, aQTL.exp.pvalues)
qqplot_exp = append(qqplot_exp, eQTL.exp.pvalues)
qqplot_combine = data.frame(rbind(qqplot_obs, qqplot_exp))
View(qqplot_combine)
qqplot_combine = data.frame(cbind(qqplot_obs, qqplot_exp))
View(qqplot_combine)
rm(list=ls())
GWAS_table_list = dir(pattern = "*.txt.gz")
GWAS_table = fread(GWAS_table_list[1], stringsAsFactors = F, header = T)
gwas_loci.obs = GWAS_table$P
gwas_loc.exp = (rank(gwas_loci.obs, ties.method="first")+.5)/(length(gwas_loci.obs)+1)
gwas_qqplot = data.frame(cbind(gwas_loci, gwas_loc.exp))
rm(list=ls())
GWAS_table_list = dir(pattern = "*.txt.gz")
GWAS_table = fread(GWAS_table_list[1], stringsAsFactors = F, header = T)
gwas_loci.obs = GWAS_table$P
gwas_loci.exp = (rank(gwas_loci.obs, ties.method="first")+.5)/(length(gwas_loci.obs)+1)
gwas_qqplot = data.frame(cbind(gwas_loci.obs, gwas_loci.exp))
gwas_qqplot = data.frame(cbind(gwas_loci.obs, gwas_loci.exp))
colnames(gwas_qqplot) = c("Obs", "Exp")
gwas_qqplot$Annotation = "GWAS_loci"
View(gwas_qqplot)
aQTL_table = subset(GWAS_table, GWAS_table$QTL_Annotation == 1)
aQTL.obs = as.numeric(aQTL_table$P)
aQTL.exp = (rank(aQTL.obs, ties.method="first")+.5)/(length(aQTL.obs)+1)
aQTL_qqplot = data.frame(cbind(aQTL.obs, aQTL.exp))
colnames(aQTL_qqplot) = c("Obs", "Exp")
aQTL_qqplot$Annotation = "aQTL"
View(aQTL_qqplot)
eQTL_table = subset(GWAS_table, GWAS_table$eQTL_Annotation == 1)
eQTL.obs = as.numeric(eQTL_table$P)
eQTL.exp = (rank(eQTL.obs, ties.method="first")+.5)/(length(eQTL.obs)+1)
eQTL_qqplot = data.frame(cbind(eQTL.obs, eQTL.exp))
colnames(eQTL_qqplot) = c("Obs", "Exp")
eQTL_qqplot$Annotation = "eQTL"
View(eQTL_qqplot)
qqplot_combine = data.frame(rbind(gwas_qqplot, aQTL_qqplot, eQTL_qqplot))
View(qqplot_combine)
#Make plot
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point()
library(ggplot2)
#Make plot
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point()
qqplot_combine$Obs = -log10(qqplot_combine$Obs)
qqplot_combine$Exp = -log10(qqplot_combine$Exp)
View(qqplot_combine)
View(qqplot_combine)
#Make plot
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point(size=Annotation) +
scale_color_manual(values=c('#000000','#2653AF', '#FFC13D')) +
scale_size_manual(values=c(0.5,1,1))
View(qqplot_combine)
#Make plot
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point(aes(size=Annotation)) +
scale_color_manual(values=c('#000000','#2653AF', '#FFC13D')) +
scale_size_manual(values=c(0.5,1,1))
View(eQTL_qqplot)
View(eQTL_table)
View(aQTL_qqplot)
View(aQTL_table)
#Make plot
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point(aes(size=Annotation)) +
scale_color_manual(values=c('#FFC13D','#2653AF', '#000000')) +
scale_size_manual(values=c(1,1,0.5)) +
geom_abline(intercept = 0, slope = 1, color="grey", size=1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_bw()
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point(aes(size=Annotation)) +
scale_color_manual(values=c('#FFC13D','#2653AF', '#000000')) +
scale_size_manual(values=c(1,1,0.5)) +
geom_abline(intercept = 0, slope = 1, color="grey", size=0.2) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
GWAS_table_list[1]
ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point() +
scale_color_manual(values=c('#E69F00','#0072B2','#000000')) +
geom_abline(intercept = 0, slope = 1, color="red", size=0.5) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# get tissue name
tissue_name_seperate = strsplit(GWAS_table_list[1], sep = "_")
# get tissue name
tissue_name_seperate = strsplit(GWAS_table_list[1])
# get tissue name
tissue_name_seperate = strsplit(GWAS_table_list[1], "_")
View(tissue_name_seperate)
# get tissue name
tissue_name_seperate = strsplit(GWAS_table_list[1], "_")[[1]]
tissue_name_seperate
file_name_seperate = strsplit(GWAS_table_list[1], "_")[[1]]
tissue_disease_name = paste(file_name_seperate, sep = "_")
tissue_disease_name
tissue_disease_name = paste(file_name_seperate[1:length(file_name_seperate)-1], sep = "_")
tissue_disease_name
tissue_disease_name = file_name_seperate[1]
for(j in 2:length(file_name_seperate)-1){
tissue_disease_name = paste(tissue_disease_name, file_name_seperate[j], sep = "_")
}
tissue_disease_name
tissue_disease_name = file_name_seperate[1]
tissue_disease_name = paste(tissue_disease_name, file_name_seperate[2], sep = "_")
tissue_disease_name = file_name_seperate[1]
for(j in 2:(length(file_name_seperate)-1)){
tissue_disease_name = paste(tissue_disease_name, file_name_seperate[j], sep = "_")
}
tissue_disease_name
png(paste0(tissue_disease_name, "_qqplot.png"))
QQplot = ggplot(qqplot_combine, aes(x=Exp, y=Obs, color=Annotation)) +
geom_point() +
scale_color_manual(values=c('#E69F00','#0072B2','#000000')) +
geom_abline(intercept = 0, slope = 1, color="red", size=0.5) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(QQplot)
dev.off()
#Make plot
pdf(paste0(tissue_disease_name, "_qqplot.pdf"))
print(QQplot)
dev.off()
View(eQTL_qqplot)
View(eQTL_table)
rm(list=ls())
library("readxl")
#setwd("/usr/share/httpd/covid-19-county-R0/TSHS_CaseCountData/")
my_data = read_excel("Texas COVID-19 Case Count Data by County.xlsx", skip=2, col_names=T, n_max=254)
library(stringr)
#DATE = paste0("2020",gsub(x=colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")], pattern="Cases\r\n|Cases\r\n\r\n|-", replacement=""))
DATE = paste0("2020",str_match(string=colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")], pattern="(\\d+-\\d+)")[,2])
DATE = gsub(x = DATE, pattern = "-", replacement = "")
colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")] = DATE
my_data = my_data[, -2]
colnames(my_data)[1] = "county"
my_data = as.data.frame(my_data)
# calculate new daily cases after specified days
selected_date = which(colnames(my_data) == "20201104")
## daily new cases dataframe
if((ncol(my_data)-selected_date) >= 1){
daily_new_cases = data.frame(matrix(nrow = 254, ncol = (ncol(my_data) - selected_date)))
colnames(daily_new_cases) = colnames(my_data)[(selected_date+1):ncol(my_data)]
for(i in 1:(ncol(my_data)-selected_date)){
daily_new_cases[,i] = my_data[,selected_date+i] - my_data[,selected_date+i-1]
}
}
# read new county data
new_data = read_excel("DSHS New County Data.xlsx", col_names=T, n_max=9)
new_data_date = seq(20200901,20200930,1)
new_data_date_oct = seq(20201001,20201031,1)
new_data_date_nov = seq(20201101,20201104,1)
new_data_date = append(new_data_date, new_data_date_oct)
new_data_date = append(new_data_date, new_data_date_nov)
colnames(new_data) = c("county", new_data_date)
new_data = as.data.frame(new_data)
counties = unique(my_data$county)
for(i in 1:length(counties)){
county = counties[i]
my_data_county = my_data[which(my_data$county == county),]
new_data_county = new_data[which(new_data$county == county),]
if(nrow(new_data_county) == 0){
next
} else {
for(j in 2:ncol(new_data)){
date = colnames(new_data_county[j])
current = which(colnames(my_data_county) == date)
previous = current - 1
my_data_county[1,current] =  my_data_county[1,previous] + new_data_county[1,j]
}
}
my_data[which(my_data$county == county),] = my_data_county
}
# update data after Nov.2
if((ncol(my_data)-selected_date) >= 1){
for(i in 1:(ncol(my_data)-selected_date)){
my_data[,selected_date+i] = my_data[,selected_date+i-1] + daily_new_cases[,i]
}
}
setwd("../../../../")
setwd("Documents/Amos_lab/covid-19-county-R0/TSHS_CaseCountData/")
library("readxl")
#setwd("/usr/share/httpd/covid-19-county-R0/TSHS_CaseCountData/")
my_data = read_excel("Texas COVID-19 Case Count Data by County.xlsx", skip=2, col_names=T, n_max=254)
library(stringr)
#DATE = paste0("2020",gsub(x=colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")], pattern="Cases\r\n|Cases\r\n\r\n|-", replacement=""))
DATE = paste0("2020",str_match(string=colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")], pattern="(\\d+-\\d+)")[,2])
DATE = gsub(x = DATE, pattern = "-", replacement = "")
colnames(my_data)[grep(x=colnames(my_data), pattern="Cases")] = DATE
my_data = my_data[, -2]
colnames(my_data)[1] = "county"
my_data = as.data.frame(my_data)
# calculate new daily cases after specified days
selected_date = which(colnames(my_data) == "20201104")
## daily new cases dataframe
if((ncol(my_data)-selected_date) >= 1){
daily_new_cases = data.frame(matrix(nrow = 254, ncol = (ncol(my_data) - selected_date)))
colnames(daily_new_cases) = colnames(my_data)[(selected_date+1):ncol(my_data)]
for(i in 1:(ncol(my_data)-selected_date)){
daily_new_cases[,i] = my_data[,selected_date+i] - my_data[,selected_date+i-1]
}
}
# read new county data
new_data = read_excel("DSHS New County Data.xlsx", col_names=T, n_max=9)
new_data_date = seq(20200901,20200930,1)
new_data_date_oct = seq(20201001,20201031,1)
new_data_date_nov = seq(20201101,20201104,1)
new_data_date = append(new_data_date, new_data_date_oct)
new_data_date = append(new_data_date, new_data_date_nov)
colnames(new_data) = c("county", new_data_date)
new_data = as.data.frame(new_data)
counties = unique(my_data$county)
for(i in 1:length(counties)){
county = counties[i]
my_data_county = my_data[which(my_data$county == county),]
new_data_county = new_data[which(new_data$county == county),]
if(nrow(new_data_county) == 0){
next
} else {
for(j in 2:ncol(new_data)){
date = colnames(new_data_county[j])
current = which(colnames(my_data_county) == date)
previous = current - 1
my_data_county[1,current] =  my_data_county[1,previous] + new_data_county[1,j]
}
}
my_data[which(my_data$county == county),] = my_data_county
}
# update data after Nov.2
if((ncol(my_data)-selected_date) >= 1){
for(i in 1:(ncol(my_data)-selected_date)){
my_data[,selected_date+i] = my_data[,selected_date+i-1] + daily_new_cases[,i]
}
}
View(my_data)
